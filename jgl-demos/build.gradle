import eu.infomas.annotation.AnnotationDetector
import eu.infomas.annotation.AnnotationDetector.TypeReporter
import java.lang.annotation.Annotation

def webstartUnsignedLibPath = "build/webstart-lib-unsigned"
def webstartSignedLibPath = "build/webstart/lib"

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'eu.infomas:annotation-detector:3.0.2' }
}

dependencies {
	compile project(':jgl-swt')
	compile 'net.tribe7.seeds:seeds-primitives:14.0.1'
	compile 'org.slf4j:slf4j-log4j12:1.7.5'
	provided 'eu.infomas:annotation-detector:3.0.2'
}

task copyFiles(type: Copy, dependsOn: [jar]) {	
	from configurations.runtime
	from("build/libs")
	into(webstartUnsignedLibPath)
	include('*.jar')
	exclude { 
		details -> details.file.name.contains('jogl') || details.file.name.contains('gluegen')
	}
}

task jarSign(dependsOn: [copyFiles]) {
	ext.srcDir = file(webstartUnsignedLibPath)
	ext.destDir = file(webstartSignedLibPath)
	inputs.dir srcDir
	outputs.dir destDir
	doLast {
		destDir.mkdirs()
		def libFiles = files { srcDir.listFiles() }
		libFiles.each {
			println "Signing: " + it
			ant.signjar(
				destDir: webstartSignedLibPath,
				alias: project.getProperty('jarsign.keystore.alias'),
				jar: it,
				keystore: project.getProperty('jarsign.keystore.path'),
				storepass: project.getProperty('jarsign.keystore.password'),
				preservelastmodified: 'true'
			)
		}
	}
}

task doAnnotations() {

	/*def tr = new TypeReporter() {
		private List<String> webstartDemos = new ArrayList<String>();
		public Class<? extends Annotation>[] annotations() { return [WebstartDemo.class] }
		public void reportTypeAnnotation(Class<? extends Annotation> annotation, String className) {
			getWebstartDemos().add(className);
		}
		public List<String> getWebstartDemos() { return webstartDemos; }
	};

	def cf = new AnnotationDetector(tr)
	cf.detect()
	tr.webstartDemos.each {
		println it
	}*/
}

task generateJnlp(dependsOn: [jarSign]) << {

	def jnlpTemplateFile = file('src/main/webstart/jgl.xml')
	def root = new XmlParser().parse(jnlpTemplateFile)
	def jnlpFileName = "${project.name}-${version}.jnlp"

	root.@href = jnlpFileName

	def information = root.information[0]
	def title = information.title[0]
	def vendor = information.vendor[0]

	title.setValue("Gradle Webstart example")
	vendor.setValue("ANotes")

	def descriptionList = information.description

	descriptionList.each {
		it.setValue("Simple example of generating webstart files using gradle")
	}

	def resource = root.resources[0]
	def j2se = resource.j2se[0]
	j2se.@version = "${project.sourceCompatibility}+"
	def collection = files { file(webstartSignedLibPath).listFiles() }
	def mainJar = "${project.name}-${version}.jar"

	collection.each {
		def resourceValues = [href: 'lib/' + it.name]
		if (mainJar == it.name) {
			resourceValues = [href: 'lib/' + it.name, main: 'true']
		}
		resource.appendNode('jar', resourceValues)
	}

	def jnlpFile = file('build/webstart/' + jnlpFileName)
	new XmlNodePrinter(new PrintWriter(jnlpFile)).print(root)
}

task generateWebStartFiles (dependsOn: [generateJnlp]) << {
	println("Generating all webstart files in: " + webstartSignedLibPath)
}