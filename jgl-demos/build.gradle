dependencies {
	compile project(':jgl-swt')
	compile 'net.tribe7.seeds:seeds-primitives:14.0.1'
}

task copyFiles(type: Copy, dependsOn: [jar]) {	
	from configurations.runtime
	from("build/libs")
	into("build/webstart/lib")
	include('*.jar')
}

task jarSign(dependsOn: [copyFiles]) {
	ext.srcDir = file('build/webstart/lib')
	ext.destDir = file('build/webstart/signed')
	inputs.dir srcDir
	outputs.dir destDir
	doLast {
		destDir.mkdirs()
		def libFiles = files { srcDir.listFiles() }
		libFiles.each {
			println "Signing: " + it
			ant.signjar(
				destDir: 'build/webstart/signed',
				alias: project.getProperty('jarsign.keystore.alias'),
				jar: it,
				keystore: project.getProperty('jarsign.keystore.path'),
				storepass: project.getProperty('jarsign.keystore.password'),
				preservelastmodified: 'true'
			)
		}
	}
}

task generateJnlp(dependsOn: [jarSign]) << {

	File jnlpTemplateFile = new File('src/jnlp/template/template.vm')
	def root = new XmlParser().parse(jnlpTemplateFile)
	def jnlpFileName = "gradle-webstart-example-${version}.jnlp"

	root.@codebase = 'https://dl.dropbox.com/u/24028482/jnlp/gradle-webstart-example'
	root.@href = jnlpFileName

	def information = root.information[0]
	def title = information.title[0]
	def vendor = information.vendor[0]
	title.setValue("Gradle Webstart example")
	vendor.setValue("ANotes")
	def descriptionList = information.description
	descriptionList.each {
		it.setValue("Simple example of generating webstart files using gradle")
	}

	def resource = root.resources[0]
	def j2se = resource.j2se[0]
	j2se.@version = "1.6+"
	def collection = files { file('webstart/lib').listFiles() }
	def mainJar = "gradle-webstart-example-${version}.jar"
	collection.each {
		def resourceValues = [href: it.name]
		if (mainJar == it.name) {
			resourceValues = [href: it.name, main: 'true']
		}
		resource.appendNode('jar', resourceValues)
	}

	def applicationDesc = root.'application-desc'[0]
	applicationDesc.'@main-class' = "org.anotes.example.gradlewebstart.MainApp"

	File jnlpFile = new File('webstart/signed/' + jnlpFileName)
	new XmlNodePrinter(new PrintWriter(jnlpFile)).print(root)
}

task generateWebStartFiles (dependsOn: [generateJnlp]) << {
	println("Generating all webstart files in:webstart/signed")
}