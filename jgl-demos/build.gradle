import org.scannotation.AnnotationDB
import groovy.json.JsonBuilder

def webstartDir = "build/webstart"
def webstartUnsignedLibPath = "build/webstart-lib-unsigned"
def webstartSignedLibPath = "$webstartDir/lib"
def mainJar = "${project.name}-${version}.jar"

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'net.sf.scannotation:scannotation:1.0.2' }
}

dependencies {
	compile project(':jgl-opengl')
	testCompile project(':jgl-swt')
	compile 'net.tribe7.seeds:seeds-primitives:14.0.1'
}

task copyJars(type: Copy, dependsOn: [jar]) {	
	from configurations.runtime
	from("build/libs")
	into(webstartUnsignedLibPath)
	include('*.jar')
	exclude { 
		details -> details.file.name.contains('jogl') || details.file.name.contains('gluegen')
	}
}

task jarSign(dependsOn: [copyJars]) {

	ext.srcDir = file(webstartUnsignedLibPath)
	ext.destDir = file(webstartSignedLibPath)
	inputs.dir srcDir
	outputs.dir destDir

	doLast {

		destDir.mkdirs()
		def libFiles = files { srcDir.listFiles() }
		libFiles.each {

			println "Initializing: " + it

			ant.jar(destfile: it, update: true) {
				delegate.manifest {
					attribute(name: 'permissions', value: 'all-permissions')
					attribute(name: 'codebase', value: '*')
				}
			}

			ant.signjar(
				destDir: webstartSignedLibPath,
				alias: project.getProperty('jarsign.keystore.alias'),
				jar: it,
				keystore: project.getProperty('jarsign.keystore.path'),
				storepass: project.getProperty('jarsign.keystore.password'),
				preservelastmodified: 'true'
			)
		}
	}
}

task generateJnlp(dependsOn: [jarSign]) {

	ext.srcFile = file("${project.libsDir}/${mainJar}")
	ext.destDir = file("${webstartDir}/jnlp")
	inputs.file srcFile
	outputs.dir destDir

	def adb = new AnnotationDB()
	def mainJarUrl = ext.srcFile.toURI().toURL()
	def jnlpTemplateFile = file('src/main/webstart/jgl.xml')

	doLast {
		destDir.mkdirs()	
		adb.scanArchives(mainJarUrl)
		def demoList = adb.annotationIndex['net.tribe7.demos.WebstartDemo']
	
		demoList.each {
	
			def root = new XmlParser().parse(jnlpTemplateFile)
			def jnlpFileName = "${it}.jnlp"
	
			root.@href = jnlpFileName
	
			def information = root.information[0]
			def title = information.title[0]
			def vendor = information.vendor[0]
	
			title.setValue(it)
			vendor.setValue("tribe7.net")
	
			def descriptionList = information.description
	
			descriptionList.each {
				it.setValue("Demo description")
			}
	
			def resource = root.resources[0]
			def appletDesc = root['applet-desc'][0]
			def listenerClassParam = appletDesc.param.find{ it.@name == 'gl_event_listener_class' }
			def j2se = resource.j2se[0]
			def collection = files { file(webstartSignedLibPath).listFiles() }
	
			appletDesc.@name = it
			listenerClassParam.@value = it
			j2se.@version = "${project.sourceCompatibility}+"
	
			collection.each {
				def resourceValues = [href: '../lib/' + it.name]
				resource.appendNode('jar', resourceValues)
			}

			def jnlpFile = new File(ext.destDir, jnlpFileName)
			new XmlNodePrinter(new PrintWriter(jnlpFile)).print(root)
		}
	
		def demoJson = new File(ext.destDir.parentFile, "${project.name}.json")
		def data = demoList.sort().collect {[id: it]}
		def json = new JsonBuilder(data)
	
		demoJson.write(json.toString())
	}
}

task copyWebContent(type: Copy, dependsOn: [generateJnlp]) {
	from('src/main/www')
	from('../README.md')
	into("${webstartDir}")
}

task webstart(dependsOn: [copyWebContent]) << {
	println("Generating all webstart files in: " + webstartDir)
}